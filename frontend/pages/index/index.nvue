<template>
	<view class="fui-wrap">
		<fui-swipeaction-group>
			<fui-swipe-action @click="onClick($event,index)" v-for="(item,index) in list" :key="index">
				<fui-list-cell :bottom-border="false" @click="chat(item)">
					<view class="fui-chat__item">
						<view class="fui-chat__left">
							<view class="fui-img__box">
								<fui-avatar :src="item.avatar"></fui-avatar>
								<view class="fui-status" :class="{'fui-status__online':item.status==1}"></view>
							</view>
							<view class="fui-info__box fui-ellipsis">
								<text class="fui-name fui-ellipsis">{{item.name}}</text>
								<text class="fui-content fui-ellipsis">{{item.msg}}</text>
							</view>
						</view>
						<view class="fui-chat__right">
							<fui-badge type="danger" :value="item.num" v-if="item.num>0"></fui-badge>
							<text class="fui-time">{{item.time}}</text>
						</view>
					</view>
				</fui-list-cell>
			</fui-swipe-action>
		</fui-swipeaction-group>
		<fui-empty v-if="list.length===0" isFixed width="400" height="400" src="/static/images/common/video_call.png"
			title="跟小念老师谈谈心吧！" descr="让我们一起聊聊心情吧！">
			<view class="fui-btn__box">
				<fui-button radius="80rpx" text="开始新聊天" @click="startChat"></fui-button>
			</view>
		</fui-empty>
		<fui-fab zIndex="999" background="#246BFD" position="right" :fabs="fabs" @click="fabClick"></fui-fab>
	</view>
</template>

<script>
	import { BotType } from '@/src/shared/common/common';
	
	export default {
		data() {
			return {
				list: [], // 聊天记录列表
				fabs: [{
					name: 'home',
					text: '返回主页'
				}, {
					name: 'my',
					text: '个人中心'
				}, {
					name: 'message',
					text: '随便聊聊'
				}]
			}
		},
		onShow() {
			// 每次页面显示时加载聊天记录
			this.loadChatHistory();
		},
		methods: {
			// 加载聊天记录
			loadChatHistory() {
				this.list.length = 0;
				for (const botType in BotType) {
					const messageRecords = uni.getStorageSync('messageRecords-'+BotType[botType]) || [];
					if (messageRecords&&messageRecords.length>0){
						const msg = messageRecords[messageRecords.length-1];
						const contentList = msg.content.split('\n');
						this.list.push({
							// ...item,
							time: this.formatTime(msg.timestamp),
							msg: contentList[0],
							name: botType,
							num: 0, // 未读消息数，可以根据需要设置
							avatar: '/static/images/chat/avatar/img_avatar_2.png' // 使用统一的头像
						});
					}
				}
				// try {
				// 	const chatHistory = uni.getStorageSync('chatHistory') || [];
				// 	// 处理时间显示
				// 	this.list = chatHistory.map(item => ({
				// 		...item,
				// 		time: this.formatTime(item.timestamp),
				// 		msg: item.lastMessage,
				// 		name: `${item.agentName}老师`,
				// 		num: 0, // 未读消息数，可以根据需要设置
				// 		avatar: '/static/images/chat/avatar/img_avatar_2.png' // 使用统一的头像
				// 	}));
				// } catch (error) {
				// 	console.error('加载聊天记录失败:', error);
				// 	this.list = [];
				// }
			},

			// 格式化时间显示
			formatTime(timestamp) {
				const now = Date.now();
				const diff = now - timestamp;
				const minute = 60 * 1000;
				const hour = 60 * minute;
				const day = 24 * hour;

				if (diff < minute) {
					return '刚刚';
				} else if (diff < hour) {
					return `${Math.floor(diff / minute)}分钟前`;
				} else if (diff < day) {
					return `${Math.floor(diff / hour)}小时前`;
				} else if (diff < 2 * day) {
					return '昨天';
				} else if (diff < 3 * day) {
					return '前天';
				} else {
					const date = new Date(timestamp);
					return `${date.getMonth() + 1}-${date.getDate()}`;
				}
			},

			onClick(e, index) {
				// 删除聊天记录
				try {
					const chatHistory = uni.getStorageSync('chatHistory') || [];
					const deletedItem = chatHistory[index];
					
					if (deletedItem) {
						// 删除首页的聊天记录
						chatHistory.splice(index, 1);
						uni.setStorageSync('chatHistory', chatHistory);
						this.list.splice(index, 1);
						
						// 删除详细的聊天记录
						uni.removeStorageSync(`chatDetail_${deletedItem.agentId}`);
						
						uni.fui.toast('删除成功');
					}
				} catch (error) {
					console.error('删除聊天记录失败:', error);
					uni.fui.toast('删除失败');
				}
			},

			chat(item) {
				// 跳转到聊天页面，并传递智能体ID
				uni.navigateTo({
					url: `/pages/chat/chat?agent=${item.agentId}`,
					success: () => {
						// 将该记录移到列表顶部
						const index = this.list.findIndex(i => i.agentId === item.agentId);
						if (index > 0) {
							const record = this.list.splice(index, 1)[0];
							this.list.unshift(record);
							
							// 更新本地存储中的顺序
							const chatHistory = uni.getStorageSync('chatHistory') || [];
							const historyIndex = chatHistory.findIndex(i => i.agentId === item.agentId);
							if (historyIndex > 0) {
								const historyRecord = chatHistory.splice(historyIndex, 1)[0];
								chatHistory.unshift(historyRecord);
								uni.setStorageSync('chatHistory', chatHistory);
							}
						}
					}
				});
			},

			startChat() {
				// 跳转到home页面
				uni.navigateTo({
					url: '/pages/home/home'
				});
			},

			fabClick(e) {
				const index = e.index;
				switch (index) {
					case 0: // 返回主页
						uni.redirectTo({
							url: '/pages/home/home'
						});
						break;
					case 1: // 个人中心
						uni.navigateTo({
							url: '/pages/my/my'
						});
						break;
					case 2: // 随便聊聊
						// 从聊天记录中随机选择一个
						if (this.list.length > 0) {
							const randomIndex = Math.floor(Math.random() * this.list.length);
							const randomChat = this.list[randomIndex];
							uni.navigateTo({
								url: `/pages/chat/chat?agent=${randomChat.agentId}`
							});
						} else {
							// 如果没有聊天记录，提示用户
							uni.fui.toast('暂无聊天记录，请先添加智能体');
							// 跳转到智能体选择页面
							setTimeout(() => {
								uni.navigateTo({
									url: '/pages/agents/agents'
								});
							}, 1500);
						}
						break;
				}
			},
		}
	}
</script>

<style>
	.fui-wrap {
		padding-bottom: 64rpx;
	}

	.fui-btn__box {
		/* #ifndef APP-NVUE */
		width: 100%;
		box-sizing: border-box;
		/* #endif */
		/* #ifdef APP-NVUE */
		width: 750rpx;
		/* #endif */
		padding: 96rpx 48rpx;
	}

	.fui-chat__item {
		/* #ifndef APP-NVUE */
		width: 100%;
		display: flex;
		/* #endif */
		/* #ifdef APP-NVUE */
		flex: 1;
		/* #endif */
		flex-direction: row;
		align-items: center;
		justify-content: space-between;
	}

	.fui-chat__left {
		/* #ifndef APP-NVUE */
		display: flex;
		/* #endif */
		flex-direction: row;
		align-items: center;
		overflow: hidden;
		flex: 1;
	}

	.fui-img__box {
		width: 96rpx;
		height: 96rpx;
		position: relative;
		/* #ifndef APP-NVUE */
		flex-shrink: 0;
		/* #endif */
	}

	.fui-status {
		width: 28rpx;
		height: 28rpx;
		position: absolute;
		right: 0;
		bottom: 0;
		/* #ifndef APP-NVUE */
		border-radius: 50%;
		z-index: 5;
		box-sizing: border-box;
		/* #endif */
		/* #ifdef APP-NVUE */
		border-radius: 16rpx;
		/* #endif */
		background-color: #BDBDBD;
		border: 1px solid #fff;
	}

	.fui-status__online {
		background-color: #246BFD;
	}

	.fui-info__box {
		padding-left: 20rpx;
		padding-right: 144rpx;
		/* #ifndef APP-NVUE */
		box-sizing: border-box;
		max-width: 100%;
		/* #endif */
	}

	.fui-name {
		font-weight: 700;
		font-size: 36rpx;
		/* #ifndef APP-NVUE */
		box-sizing: border-box;
		max-width: 100%;
		/* #endif */
	}

	.fui-content {
		/* #ifndef APP-NVUE */
		max-width: 100%;
		/* #endif */
		font-size: 28rpx;
		color: #616161;
		padding-top: 12rpx;
	}

	.fui-chat__right {
		/* #ifndef APP-NVUE */
		display: flex;
		flex-shrink: 0;
		/* #endif */
		flex-direction: column;
		align-items: flex-end;
	}

	.fui-time {
		font-size: 26rpx;
		color: #616161;
		padding-top: 16rpx;
	}
</style>
